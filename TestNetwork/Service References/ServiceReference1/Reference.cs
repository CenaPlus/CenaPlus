//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestNetwork.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICenaPlusServer", CallbackContract=typeof(TestNetwork.ServiceReference1.ICenaPlusServerCallback))]
    public interface ICenaPlusServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetVersion", ReplyAction="http://tempuri.org/ICenaPlusServer/GetVersionResponse")]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetVersion", ReplyAction="http://tempuri.org/ICenaPlusServer/GetVersionResponse")]
        System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState);
        
        string EndGetVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/Authenticate", ReplyAction="http://tempuri.org/ICenaPlusServer/AuthenticateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AlreadyLoggedInError), Action="http://tempuri.org/ICenaPlusServer/AuthenticateAlreadyLoggedInErrorFault", Name="AlreadyLoggedInError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        bool Authenticate(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/Authenticate", ReplyAction="http://tempuri.org/ICenaPlusServer/AuthenticateResponse")]
        System.IAsyncResult BeginAuthenticate(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndAuthenticate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetProfile", ReplyAction="http://tempuri.org/ICenaPlusServer/GetProfileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetProfileAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.User GetProfile();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetProfile", ReplyAction="http://tempuri.org/ICenaPlusServer/GetProfileResponse")]
        System.IAsyncResult BeginGetProfile(System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.User EndGetProfile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetContestList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetContestListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetContestListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetContestList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetContestList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetContestListResponse")]
        System.IAsyncResult BeginGetContestList(System.AsyncCallback callback, object asyncState);
        
        int[] EndGetContestList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetContest", ReplyAction="http://tempuri.org/ICenaPlusServer/GetContestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetContestAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.Contest GetContest(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetContest", ReplyAction="http://tempuri.org/ICenaPlusServer/GetContestResponse")]
        System.IAsyncResult BeginGetContest(int id, System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.Contest EndGetContest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/DeleteContest", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteContestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/DeleteContestNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/DeleteContestAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void DeleteContest(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/DeleteContest", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteContestResponse")]
        System.IAsyncResult BeginDeleteContest(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteContest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/UpdateContest", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateContestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.ValidationError), Action="http://tempuri.org/ICenaPlusServer/UpdateContestValidationErrorFault", Name="ValidationError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/UpdateContestNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/UpdateContestAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void UpdateContest(int id, string title, string description, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<CenaPlus.Entity.ContestType> type, System.Nullable<bool> printingEnabled);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/UpdateContest", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateContestResponse")]
        System.IAsyncResult BeginUpdateContest(int id, string title, string description, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<CenaPlus.Entity.ContestType> type, System.Nullable<bool> printingEnabled, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateContest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/CreateContest", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateContestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/CreateContestAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.ValidationError), Action="http://tempuri.org/ICenaPlusServer/CreateContestValidationErrorFault", Name="ValidationError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int CreateContest(string title, string description, System.DateTime startTime, System.DateTime endTime, CenaPlus.Entity.ContestType type, bool printingEnabled);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/CreateContest", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateContestResponse")]
        System.IAsyncResult BeginCreateContest(string title, string description, System.DateTime startTime, System.DateTime endTime, CenaPlus.Entity.ContestType type, bool printingEnabled, System.AsyncCallback callback, object asyncState);
        
        int EndCreateContest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetProblemList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetProblemListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/GetProblemListNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetProblemListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetProblemList(int contestID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetProblemList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetProblemListResponse")]
        System.IAsyncResult BeginGetProblemList(int contestID, System.AsyncCallback callback, object asyncState);
        
        int[] EndGetProblemList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/CreateProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateProblemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/CreateProblemAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/CreateProblemNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int CreateProblem(int contestID, string title, string content, int score, int timeLimit, long memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/CreateProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateProblemResponse")]
        System.IAsyncResult BeginCreateProblem(int contestID, string title, string content, int score, int timeLimit, long memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages, System.AsyncCallback callback, object asyncState);
        
        int EndCreateProblem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/UpdateProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateProblemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/UpdateProblemAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/UpdateProblemNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void UpdateProblem(int id, string title, string content, System.Nullable<int> score, System.Nullable<int> timeLimit, System.Nullable<long> memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/UpdateProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateProblemResponse")]
        System.IAsyncResult BeginUpdateProblem(int id, string title, string content, System.Nullable<int> score, System.Nullable<int> timeLimit, System.Nullable<long> memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateProblem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/GetProblemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetProblemAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.Problem GetProblem(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/GetProblemResponse")]
        System.IAsyncResult BeginGetProblem(int id, System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.Problem EndGetProblem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/DeleteProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteProblemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/DeleteProblemNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/DeleteProblemAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void DeleteProblem(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/DeleteProblem", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteProblemResponse")]
        System.IAsyncResult BeginDeleteProblem(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteProblem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/Submit", ReplyAction="http://tempuri.org/ICenaPlusServer/SubmitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/SubmitNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/SubmitAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int Submit(int problemID, string code, CenaPlus.Entity.ProgrammingLanguage language);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/Submit", ReplyAction="http://tempuri.org/ICenaPlusServer/SubmitResponse")]
        System.IAsyncResult BeginSubmit(int problemID, string code, CenaPlus.Entity.ProgrammingLanguage language, System.AsyncCallback callback, object asyncState);
        
        int EndSubmit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetRecordList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetRecordListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetRecordListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/GetRecordListNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetRecordList(int contestID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetRecordList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetRecordListResponse")]
        System.IAsyncResult BeginGetRecordList(int contestID, System.AsyncCallback callback, object asyncState);
        
        int[] EndGetRecordList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/Rejudge", ReplyAction="http://tempuri.org/ICenaPlusServer/RejudgeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/RejudgeAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/RejudgeNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void Rejudge(int recordID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/Rejudge", ReplyAction="http://tempuri.org/ICenaPlusServer/RejudgeResponse")]
        System.IAsyncResult BeginRejudge(int recordID, System.AsyncCallback callback, object asyncState);
        
        void EndRejudge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetRecord", ReplyAction="http://tempuri.org/ICenaPlusServer/GetRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetRecordAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.Record GetRecord(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetRecord", ReplyAction="http://tempuri.org/ICenaPlusServer/GetRecordResponse")]
        System.IAsyncResult BeginGetRecord(int id, System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.Record EndGetRecord(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetQuestionList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetQuestionListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetQuestionListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/GetQuestionListNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetQuestionList(int contestID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetQuestionList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetQuestionListResponse")]
        System.IAsyncResult BeginGetQuestionList(int contestID, System.AsyncCallback callback, object asyncState);
        
        int[] EndGetQuestionList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetQuestion", ReplyAction="http://tempuri.org/ICenaPlusServer/GetQuestionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetQuestionAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.Question GetQuestion(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetQuestion", ReplyAction="http://tempuri.org/ICenaPlusServer/GetQuestionResponse")]
        System.IAsyncResult BeginGetQuestion(int id, System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.Question EndGetQuestion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/AskQuestion", ReplyAction="http://tempuri.org/ICenaPlusServer/AskQuestionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/AskQuestionAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/AskQuestionNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int AskQuestion(int contestID, string description);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/AskQuestion", ReplyAction="http://tempuri.org/ICenaPlusServer/AskQuestionResponse")]
        System.IAsyncResult BeginAskQuestion(int contestID, string description, System.AsyncCallback callback, object asyncState);
        
        int EndAskQuestion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetUserList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetUserListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetUserListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetUserList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetUserList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetUserListResponse")]
        System.IAsyncResult BeginGetUserList(System.AsyncCallback callback, object asyncState);
        
        int[] EndGetUserList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetUser", ReplyAction="http://tempuri.org/ICenaPlusServer/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetUserAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.User GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetUser", ReplyAction="http://tempuri.org/ICenaPlusServer/GetUserResponse")]
        System.IAsyncResult BeginGetUser(int id, System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.User EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/CreateUser", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/CreateUserAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void CreateUser(string name, string nickname, string password, CenaPlus.Entity.UserRole role);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/CreateUser", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(string name, string nickname, string password, CenaPlus.Entity.UserRole role, System.AsyncCallback callback, object asyncState);
        
        void EndCreateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/UpdateUser", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/UpdateUserNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/UpdateUserAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void UpdateUser(int id, string name, string nickname, string password, System.Nullable<CenaPlus.Entity.UserRole> role);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/UpdateUser", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(int id, string name, string nickname, string password, System.Nullable<CenaPlus.Entity.UserRole> role, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/DeleteUser", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/DeleteUserNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/DeleteUserAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/DeleteUser", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetOnlineList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetOnlineListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetOnlineListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetOnlineList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetOnlineList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetOnlineListResponse")]
        System.IAsyncResult BeginGetOnlineList(System.AsyncCallback callback, object asyncState);
        
        int[] EndGetOnlineList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/Kick", ReplyAction="http://tempuri.org/ICenaPlusServer/KickResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/KickAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/KickNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void Kick(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/Kick", ReplyAction="http://tempuri.org/ICenaPlusServer/KickResponse")]
        System.IAsyncResult BeginKick(int userID, System.AsyncCallback callback, object asyncState);
        
        void EndKick(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetTestCaseList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetTestCaseListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetTestCaseListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/GetTestCaseListNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetTestCaseList(int problemID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetTestCaseList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetTestCaseListResponse")]
        System.IAsyncResult BeginGetTestCaseList(int problemID, System.AsyncCallback callback, object asyncState);
        
        int[] EndGetTestCaseList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/GetTestCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetTestCaseAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.TestCase GetTestCase(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/GetTestCaseResponse")]
        System.IAsyncResult BeginGetTestCase(int id, System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.TestCase EndGetTestCase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/DeleteTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteTestCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/DeleteTestCaseAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/DeleteTestCaseNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void DeleteTestCase(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/DeleteTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/DeleteTestCaseResponse")]
        System.IAsyncResult BeginDeleteTestCase(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteTestCase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/UpdateTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateTestCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/UpdateTestCaseNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/UpdateTestCaseAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void UpdateTestCase(int id, byte[] input, byte[] output, System.Nullable<CenaPlus.Entity.TestCaseType> type);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/UpdateTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdateTestCaseResponse")]
        System.IAsyncResult BeginUpdateTestCase(int id, byte[] input, byte[] output, System.Nullable<CenaPlus.Entity.TestCaseType> type, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTestCase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/CreateTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateTestCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/CreateTestCaseAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/CreateTestCaseNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int CreateTestCase(int problemID, byte[] input, byte[] output, CenaPlus.Entity.TestCaseType type);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/CreateTestCase", ReplyAction="http://tempuri.org/ICenaPlusServer/CreateTestCaseResponse")]
        System.IAsyncResult BeginCreateTestCase(int problemID, byte[] input, byte[] output, CenaPlus.Entity.TestCaseType type, System.AsyncCallback callback, object asyncState);
        
        int EndCreateTestCase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/RequestPrinting", ReplyAction="http://tempuri.org/ICenaPlusServer/RequestPrintingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/RequestPrintingAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/RequestPrintingNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int RequestPrinting(int contestID, string content, int copies);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/RequestPrinting", ReplyAction="http://tempuri.org/ICenaPlusServer/RequestPrintingResponse")]
        System.IAsyncResult BeginRequestPrinting(int contestID, string content, int copies, System.AsyncCallback callback, object asyncState);
        
        int EndRequestPrinting(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetPrintRequest", ReplyAction="http://tempuri.org/ICenaPlusServer/GetPrintRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetPrintRequestAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        CenaPlus.Entity.PrintRequest GetPrintRequest(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetPrintRequest", ReplyAction="http://tempuri.org/ICenaPlusServer/GetPrintRequestResponse")]
        System.IAsyncResult BeginGetPrintRequest(int id, System.AsyncCallback callback, object asyncState);
        
        CenaPlus.Entity.PrintRequest EndGetPrintRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/GetPrintRequestList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetPrintRequestListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/GetPrintRequestListNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/GetPrintRequestListAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        int[] GetPrintRequestList(int contestID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/GetPrintRequestList", ReplyAction="http://tempuri.org/ICenaPlusServer/GetPrintRequestListResponse")]
        System.IAsyncResult BeginGetPrintRequestList(int contestID, System.AsyncCallback callback, object asyncState);
        
        int[] EndGetPrintRequestList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/UpdatePrintRequest", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdatePrintRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/UpdatePrintRequestAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/UpdatePrintRequestNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void UpdatePrintRequest(int id, string content, System.Nullable<int> copies, System.Nullable<CenaPlus.Entity.PrintRequestStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/UpdatePrintRequest", ReplyAction="http://tempuri.org/ICenaPlusServer/UpdatePrintRequestResponse")]
        System.IAsyncResult BeginUpdatePrintRequest(int id, string content, System.Nullable<int> copies, System.Nullable<CenaPlus.Entity.PrintRequestStatus> status, System.AsyncCallback callback, object asyncState);
        
        void EndUpdatePrintRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICenaPlusServer/DeletePrintRequest", ReplyAction="http://tempuri.org/ICenaPlusServer/DeletePrintRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.NotFoundError), Action="http://tempuri.org/ICenaPlusServer/DeletePrintRequestNotFoundErrorFault", Name="NotFoundError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        [System.ServiceModel.FaultContractAttribute(typeof(CenaPlus.Network.AccessDeniedError), Action="http://tempuri.org/ICenaPlusServer/DeletePrintRequestAccessDeniedErrorFault", Name="AccessDeniedError", Namespace="http://schemas.datacontract.org/2004/07/CenaPlus.Network")]
        void DeletePrintRequest(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/DeletePrintRequest", ReplyAction="http://tempuri.org/ICenaPlusServer/DeletePrintRequestResponse")]
        System.IAsyncResult BeginDeletePrintRequest(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeletePrintRequest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICenaPlusServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICenaPlusServer/Bye")]
        void Bye();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ICenaPlusServer/Bye")]
        System.IAsyncResult BeginBye(System.AsyncCallback callback, object asyncState);
        
        void EndBye(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICenaPlusServerChannel : TestNetwork.ServiceReference1.ICenaPlusServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.Contest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.Contest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateContestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateContestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProblemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProblemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateProblemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateProblemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProblemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProblemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.Problem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.Problem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecordListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecordListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.Record Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.Record)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQuestionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQuestionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.Question Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.Question)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AskQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AskQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOnlineListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOnlineListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestCaseListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestCaseListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.TestCase Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.TestCase)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestPrintingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestPrintingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPrintRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPrintRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CenaPlus.Entity.PrintRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CenaPlus.Entity.PrintRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPrintRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPrintRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CenaPlusServerClient : System.ServiceModel.DuplexClientBase<TestNetwork.ServiceReference1.ICenaPlusServer>, TestNetwork.ServiceReference1.ICenaPlusServer {
        
        private BeginOperationDelegate onBeginGetVersionDelegate;
        
        private EndOperationDelegate onEndGetVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateDelegate;
        
        private EndOperationDelegate onEndAuthenticateDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProfileDelegate;
        
        private EndOperationDelegate onEndGetProfileDelegate;
        
        private System.Threading.SendOrPostCallback onGetProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContestListDelegate;
        
        private EndOperationDelegate onEndGetContestListDelegate;
        
        private System.Threading.SendOrPostCallback onGetContestListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContestDelegate;
        
        private EndOperationDelegate onEndGetContestDelegate;
        
        private System.Threading.SendOrPostCallback onGetContestCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteContestDelegate;
        
        private EndOperationDelegate onEndDeleteContestDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteContestCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateContestDelegate;
        
        private EndOperationDelegate onEndUpdateContestDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateContestCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateContestDelegate;
        
        private EndOperationDelegate onEndCreateContestDelegate;
        
        private System.Threading.SendOrPostCallback onCreateContestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProblemListDelegate;
        
        private EndOperationDelegate onEndGetProblemListDelegate;
        
        private System.Threading.SendOrPostCallback onGetProblemListCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateProblemDelegate;
        
        private EndOperationDelegate onEndCreateProblemDelegate;
        
        private System.Threading.SendOrPostCallback onCreateProblemCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateProblemDelegate;
        
        private EndOperationDelegate onEndUpdateProblemDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateProblemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProblemDelegate;
        
        private EndOperationDelegate onEndGetProblemDelegate;
        
        private System.Threading.SendOrPostCallback onGetProblemCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteProblemDelegate;
        
        private EndOperationDelegate onEndDeleteProblemDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteProblemCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubmitDelegate;
        
        private EndOperationDelegate onEndSubmitDelegate;
        
        private System.Threading.SendOrPostCallback onSubmitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecordListDelegate;
        
        private EndOperationDelegate onEndGetRecordListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecordListCompletedDelegate;
        
        private BeginOperationDelegate onBeginRejudgeDelegate;
        
        private EndOperationDelegate onEndRejudgeDelegate;
        
        private System.Threading.SendOrPostCallback onRejudgeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecordDelegate;
        
        private EndOperationDelegate onEndGetRecordDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQuestionListDelegate;
        
        private EndOperationDelegate onEndGetQuestionListDelegate;
        
        private System.Threading.SendOrPostCallback onGetQuestionListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQuestionDelegate;
        
        private EndOperationDelegate onEndGetQuestionDelegate;
        
        private System.Threading.SendOrPostCallback onGetQuestionCompletedDelegate;
        
        private BeginOperationDelegate onBeginAskQuestionDelegate;
        
        private EndOperationDelegate onEndAskQuestionDelegate;
        
        private System.Threading.SendOrPostCallback onAskQuestionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserListDelegate;
        
        private EndOperationDelegate onEndGetUserListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOnlineListDelegate;
        
        private EndOperationDelegate onEndGetOnlineListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOnlineListCompletedDelegate;
        
        private BeginOperationDelegate onBeginKickDelegate;
        
        private EndOperationDelegate onEndKickDelegate;
        
        private System.Threading.SendOrPostCallback onKickCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestCaseListDelegate;
        
        private EndOperationDelegate onEndGetTestCaseListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestCaseListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestCaseDelegate;
        
        private EndOperationDelegate onEndGetTestCaseDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestCaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTestCaseDelegate;
        
        private EndOperationDelegate onEndDeleteTestCaseDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTestCaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTestCaseDelegate;
        
        private EndOperationDelegate onEndUpdateTestCaseDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTestCaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateTestCaseDelegate;
        
        private EndOperationDelegate onEndCreateTestCaseDelegate;
        
        private System.Threading.SendOrPostCallback onCreateTestCaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequestPrintingDelegate;
        
        private EndOperationDelegate onEndRequestPrintingDelegate;
        
        private System.Threading.SendOrPostCallback onRequestPrintingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPrintRequestDelegate;
        
        private EndOperationDelegate onEndGetPrintRequestDelegate;
        
        private System.Threading.SendOrPostCallback onGetPrintRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPrintRequestListDelegate;
        
        private EndOperationDelegate onEndGetPrintRequestListDelegate;
        
        private System.Threading.SendOrPostCallback onGetPrintRequestListCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePrintRequestDelegate;
        
        private EndOperationDelegate onEndUpdatePrintRequestDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePrintRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeletePrintRequestDelegate;
        
        private EndOperationDelegate onEndDeletePrintRequestDelegate;
        
        private System.Threading.SendOrPostCallback onDeletePrintRequestCompletedDelegate;
        
        public CenaPlusServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CenaPlusServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CenaPlusServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CenaPlusServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CenaPlusServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetVersionCompletedEventArgs> GetVersionCompleted;
        
        public event System.EventHandler<AuthenticateCompletedEventArgs> AuthenticateCompleted;
        
        public event System.EventHandler<GetProfileCompletedEventArgs> GetProfileCompleted;
        
        public event System.EventHandler<GetContestListCompletedEventArgs> GetContestListCompleted;
        
        public event System.EventHandler<GetContestCompletedEventArgs> GetContestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteContestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateContestCompleted;
        
        public event System.EventHandler<CreateContestCompletedEventArgs> CreateContestCompleted;
        
        public event System.EventHandler<GetProblemListCompletedEventArgs> GetProblemListCompleted;
        
        public event System.EventHandler<CreateProblemCompletedEventArgs> CreateProblemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateProblemCompleted;
        
        public event System.EventHandler<GetProblemCompletedEventArgs> GetProblemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteProblemCompleted;
        
        public event System.EventHandler<SubmitCompletedEventArgs> SubmitCompleted;
        
        public event System.EventHandler<GetRecordListCompletedEventArgs> GetRecordListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RejudgeCompleted;
        
        public event System.EventHandler<GetRecordCompletedEventArgs> GetRecordCompleted;
        
        public event System.EventHandler<GetQuestionListCompletedEventArgs> GetQuestionListCompleted;
        
        public event System.EventHandler<GetQuestionCompletedEventArgs> GetQuestionCompleted;
        
        public event System.EventHandler<AskQuestionCompletedEventArgs> AskQuestionCompleted;
        
        public event System.EventHandler<GetUserListCompletedEventArgs> GetUserListCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<GetOnlineListCompletedEventArgs> GetOnlineListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> KickCompleted;
        
        public event System.EventHandler<GetTestCaseListCompletedEventArgs> GetTestCaseListCompleted;
        
        public event System.EventHandler<GetTestCaseCompletedEventArgs> GetTestCaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTestCaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTestCaseCompleted;
        
        public event System.EventHandler<CreateTestCaseCompletedEventArgs> CreateTestCaseCompleted;
        
        public event System.EventHandler<RequestPrintingCompletedEventArgs> RequestPrintingCompleted;
        
        public event System.EventHandler<GetPrintRequestCompletedEventArgs> GetPrintRequestCompleted;
        
        public event System.EventHandler<GetPrintRequestListCompletedEventArgs> GetPrintRequestListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdatePrintRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeletePrintRequestCompleted;
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetVersion(System.IAsyncResult result) {
            return base.Channel.EndGetVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetVersion(callback, asyncState);
        }
        
        private object[] OnEndGetVersion(System.IAsyncResult result) {
            string retVal = this.EndGetVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVersionCompleted(object state) {
            if ((this.GetVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        public void GetVersionAsync(object userState) {
            if ((this.onBeginGetVersionDelegate == null)) {
                this.onBeginGetVersionDelegate = new BeginOperationDelegate(this.OnBeginGetVersion);
            }
            if ((this.onEndGetVersionDelegate == null)) {
                this.onEndGetVersionDelegate = new EndOperationDelegate(this.OnEndGetVersion);
            }
            if ((this.onGetVersionCompletedDelegate == null)) {
                this.onGetVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetVersionDelegate, null, this.onEndGetVersionDelegate, this.onGetVersionCompletedDelegate, userState);
        }
        
        public bool Authenticate(string userName, string password) {
            return base.Channel.Authenticate(userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAuthenticate(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticate(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAuthenticate(System.IAsyncResult result) {
            return base.Channel.EndAuthenticate(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginAuthenticate(userName, password, callback, asyncState);
        }
        
        private object[] OnEndAuthenticate(System.IAsyncResult result) {
            bool retVal = this.EndAuthenticate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateCompleted(object state) {
            if ((this.AuthenticateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateAsync(string userName, string password) {
            this.AuthenticateAsync(userName, password, null);
        }
        
        public void AuthenticateAsync(string userName, string password, object userState) {
            if ((this.onBeginAuthenticateDelegate == null)) {
                this.onBeginAuthenticateDelegate = new BeginOperationDelegate(this.OnBeginAuthenticate);
            }
            if ((this.onEndAuthenticateDelegate == null)) {
                this.onEndAuthenticateDelegate = new EndOperationDelegate(this.OnEndAuthenticate);
            }
            if ((this.onAuthenticateCompletedDelegate == null)) {
                this.onAuthenticateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateDelegate, new object[] {
                        userName,
                        password}, this.onEndAuthenticateDelegate, this.onAuthenticateCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.User GetProfile() {
            return base.Channel.GetProfile();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProfile(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProfile(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.User EndGetProfile(System.IAsyncResult result) {
            return base.Channel.EndGetProfile(result);
        }
        
        private System.IAsyncResult OnBeginGetProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetProfile(callback, asyncState);
        }
        
        private object[] OnEndGetProfile(System.IAsyncResult result) {
            CenaPlus.Entity.User retVal = this.EndGetProfile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProfileCompleted(object state) {
            if ((this.GetProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProfileCompleted(this, new GetProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProfileAsync() {
            this.GetProfileAsync(null);
        }
        
        public void GetProfileAsync(object userState) {
            if ((this.onBeginGetProfileDelegate == null)) {
                this.onBeginGetProfileDelegate = new BeginOperationDelegate(this.OnBeginGetProfile);
            }
            if ((this.onEndGetProfileDelegate == null)) {
                this.onEndGetProfileDelegate = new EndOperationDelegate(this.OnEndGetProfile);
            }
            if ((this.onGetProfileCompletedDelegate == null)) {
                this.onGetProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProfileCompleted);
            }
            base.InvokeAsync(this.onBeginGetProfileDelegate, null, this.onEndGetProfileDelegate, this.onGetProfileCompletedDelegate, userState);
        }
        
        public int[] GetContestList() {
            return base.Channel.GetContestList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetContestList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContestList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetContestList(System.IAsyncResult result) {
            return base.Channel.EndGetContestList(result);
        }
        
        private System.IAsyncResult OnBeginGetContestList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetContestList(callback, asyncState);
        }
        
        private object[] OnEndGetContestList(System.IAsyncResult result) {
            int[] retVal = this.EndGetContestList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContestListCompleted(object state) {
            if ((this.GetContestListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContestListCompleted(this, new GetContestListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContestListAsync() {
            this.GetContestListAsync(null);
        }
        
        public void GetContestListAsync(object userState) {
            if ((this.onBeginGetContestListDelegate == null)) {
                this.onBeginGetContestListDelegate = new BeginOperationDelegate(this.OnBeginGetContestList);
            }
            if ((this.onEndGetContestListDelegate == null)) {
                this.onEndGetContestListDelegate = new EndOperationDelegate(this.OnEndGetContestList);
            }
            if ((this.onGetContestListCompletedDelegate == null)) {
                this.onGetContestListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContestListCompleted);
            }
            base.InvokeAsync(this.onBeginGetContestListDelegate, null, this.onEndGetContestListDelegate, this.onGetContestListCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.Contest GetContest(int id) {
            return base.Channel.GetContest(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetContest(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContest(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.Contest EndGetContest(System.IAsyncResult result) {
            return base.Channel.EndGetContest(result);
        }
        
        private System.IAsyncResult OnBeginGetContest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetContest(id, callback, asyncState);
        }
        
        private object[] OnEndGetContest(System.IAsyncResult result) {
            CenaPlus.Entity.Contest retVal = this.EndGetContest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContestCompleted(object state) {
            if ((this.GetContestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContestCompleted(this, new GetContestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContestAsync(int id) {
            this.GetContestAsync(id, null);
        }
        
        public void GetContestAsync(int id, object userState) {
            if ((this.onBeginGetContestDelegate == null)) {
                this.onBeginGetContestDelegate = new BeginOperationDelegate(this.OnBeginGetContest);
            }
            if ((this.onEndGetContestDelegate == null)) {
                this.onEndGetContestDelegate = new EndOperationDelegate(this.OnEndGetContest);
            }
            if ((this.onGetContestCompletedDelegate == null)) {
                this.onGetContestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContestCompleted);
            }
            base.InvokeAsync(this.onBeginGetContestDelegate, new object[] {
                        id}, this.onEndGetContestDelegate, this.onGetContestCompletedDelegate, userState);
        }
        
        public void DeleteContest(int id) {
            base.Channel.DeleteContest(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteContest(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteContest(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteContest(System.IAsyncResult result) {
            base.Channel.EndDeleteContest(result);
        }
        
        private System.IAsyncResult OnBeginDeleteContest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteContest(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteContest(System.IAsyncResult result) {
            this.EndDeleteContest(result);
            return null;
        }
        
        private void OnDeleteContestCompleted(object state) {
            if ((this.DeleteContestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteContestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteContestAsync(int id) {
            this.DeleteContestAsync(id, null);
        }
        
        public void DeleteContestAsync(int id, object userState) {
            if ((this.onBeginDeleteContestDelegate == null)) {
                this.onBeginDeleteContestDelegate = new BeginOperationDelegate(this.OnBeginDeleteContest);
            }
            if ((this.onEndDeleteContestDelegate == null)) {
                this.onEndDeleteContestDelegate = new EndOperationDelegate(this.OnEndDeleteContest);
            }
            if ((this.onDeleteContestCompletedDelegate == null)) {
                this.onDeleteContestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteContestCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteContestDelegate, new object[] {
                        id}, this.onEndDeleteContestDelegate, this.onDeleteContestCompletedDelegate, userState);
        }
        
        public void UpdateContest(int id, string title, string description, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<CenaPlus.Entity.ContestType> type, System.Nullable<bool> printingEnabled) {
            base.Channel.UpdateContest(id, title, description, startTime, endTime, type, printingEnabled);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateContest(int id, string title, string description, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<CenaPlus.Entity.ContestType> type, System.Nullable<bool> printingEnabled, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateContest(id, title, description, startTime, endTime, type, printingEnabled, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateContest(System.IAsyncResult result) {
            base.Channel.EndUpdateContest(result);
        }
        
        private System.IAsyncResult OnBeginUpdateContest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            string title = ((string)(inValues[1]));
            string description = ((string)(inValues[2]));
            System.Nullable<System.DateTime> startTime = ((System.Nullable<System.DateTime>)(inValues[3]));
            System.Nullable<System.DateTime> endTime = ((System.Nullable<System.DateTime>)(inValues[4]));
            System.Nullable<CenaPlus.Entity.ContestType> type = ((System.Nullable<CenaPlus.Entity.ContestType>)(inValues[5]));
            System.Nullable<bool> printingEnabled = ((System.Nullable<bool>)(inValues[6]));
            return this.BeginUpdateContest(id, title, description, startTime, endTime, type, printingEnabled, callback, asyncState);
        }
        
        private object[] OnEndUpdateContest(System.IAsyncResult result) {
            this.EndUpdateContest(result);
            return null;
        }
        
        private void OnUpdateContestCompleted(object state) {
            if ((this.UpdateContestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateContestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateContestAsync(int id, string title, string description, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<CenaPlus.Entity.ContestType> type, System.Nullable<bool> printingEnabled) {
            this.UpdateContestAsync(id, title, description, startTime, endTime, type, printingEnabled, null);
        }
        
        public void UpdateContestAsync(int id, string title, string description, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<CenaPlus.Entity.ContestType> type, System.Nullable<bool> printingEnabled, object userState) {
            if ((this.onBeginUpdateContestDelegate == null)) {
                this.onBeginUpdateContestDelegate = new BeginOperationDelegate(this.OnBeginUpdateContest);
            }
            if ((this.onEndUpdateContestDelegate == null)) {
                this.onEndUpdateContestDelegate = new EndOperationDelegate(this.OnEndUpdateContest);
            }
            if ((this.onUpdateContestCompletedDelegate == null)) {
                this.onUpdateContestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateContestCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateContestDelegate, new object[] {
                        id,
                        title,
                        description,
                        startTime,
                        endTime,
                        type,
                        printingEnabled}, this.onEndUpdateContestDelegate, this.onUpdateContestCompletedDelegate, userState);
        }
        
        public int CreateContest(string title, string description, System.DateTime startTime, System.DateTime endTime, CenaPlus.Entity.ContestType type, bool printingEnabled) {
            return base.Channel.CreateContest(title, description, startTime, endTime, type, printingEnabled);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateContest(string title, string description, System.DateTime startTime, System.DateTime endTime, CenaPlus.Entity.ContestType type, bool printingEnabled, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateContest(title, description, startTime, endTime, type, printingEnabled, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndCreateContest(System.IAsyncResult result) {
            return base.Channel.EndCreateContest(result);
        }
        
        private System.IAsyncResult OnBeginCreateContest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string title = ((string)(inValues[0]));
            string description = ((string)(inValues[1]));
            System.DateTime startTime = ((System.DateTime)(inValues[2]));
            System.DateTime endTime = ((System.DateTime)(inValues[3]));
            CenaPlus.Entity.ContestType type = ((CenaPlus.Entity.ContestType)(inValues[4]));
            bool printingEnabled = ((bool)(inValues[5]));
            return this.BeginCreateContest(title, description, startTime, endTime, type, printingEnabled, callback, asyncState);
        }
        
        private object[] OnEndCreateContest(System.IAsyncResult result) {
            int retVal = this.EndCreateContest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateContestCompleted(object state) {
            if ((this.CreateContestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateContestCompleted(this, new CreateContestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateContestAsync(string title, string description, System.DateTime startTime, System.DateTime endTime, CenaPlus.Entity.ContestType type, bool printingEnabled) {
            this.CreateContestAsync(title, description, startTime, endTime, type, printingEnabled, null);
        }
        
        public void CreateContestAsync(string title, string description, System.DateTime startTime, System.DateTime endTime, CenaPlus.Entity.ContestType type, bool printingEnabled, object userState) {
            if ((this.onBeginCreateContestDelegate == null)) {
                this.onBeginCreateContestDelegate = new BeginOperationDelegate(this.OnBeginCreateContest);
            }
            if ((this.onEndCreateContestDelegate == null)) {
                this.onEndCreateContestDelegate = new EndOperationDelegate(this.OnEndCreateContest);
            }
            if ((this.onCreateContestCompletedDelegate == null)) {
                this.onCreateContestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateContestCompleted);
            }
            base.InvokeAsync(this.onBeginCreateContestDelegate, new object[] {
                        title,
                        description,
                        startTime,
                        endTime,
                        type,
                        printingEnabled}, this.onEndCreateContestDelegate, this.onCreateContestCompletedDelegate, userState);
        }
        
        public int[] GetProblemList(int contestID) {
            return base.Channel.GetProblemList(contestID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProblemList(int contestID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProblemList(contestID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetProblemList(System.IAsyncResult result) {
            return base.Channel.EndGetProblemList(result);
        }
        
        private System.IAsyncResult OnBeginGetProblemList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int contestID = ((int)(inValues[0]));
            return this.BeginGetProblemList(contestID, callback, asyncState);
        }
        
        private object[] OnEndGetProblemList(System.IAsyncResult result) {
            int[] retVal = this.EndGetProblemList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProblemListCompleted(object state) {
            if ((this.GetProblemListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProblemListCompleted(this, new GetProblemListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProblemListAsync(int contestID) {
            this.GetProblemListAsync(contestID, null);
        }
        
        public void GetProblemListAsync(int contestID, object userState) {
            if ((this.onBeginGetProblemListDelegate == null)) {
                this.onBeginGetProblemListDelegate = new BeginOperationDelegate(this.OnBeginGetProblemList);
            }
            if ((this.onEndGetProblemListDelegate == null)) {
                this.onEndGetProblemListDelegate = new EndOperationDelegate(this.OnEndGetProblemList);
            }
            if ((this.onGetProblemListCompletedDelegate == null)) {
                this.onGetProblemListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProblemListCompleted);
            }
            base.InvokeAsync(this.onBeginGetProblemListDelegate, new object[] {
                        contestID}, this.onEndGetProblemListDelegate, this.onGetProblemListCompletedDelegate, userState);
        }
        
        public int CreateProblem(int contestID, string title, string content, int score, int timeLimit, long memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages) {
            return base.Channel.CreateProblem(contestID, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateProblem(int contestID, string title, string content, int score, int timeLimit, long memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateProblem(contestID, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndCreateProblem(System.IAsyncResult result) {
            return base.Channel.EndCreateProblem(result);
        }
        
        private System.IAsyncResult OnBeginCreateProblem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int contestID = ((int)(inValues[0]));
            string title = ((string)(inValues[1]));
            string content = ((string)(inValues[2]));
            int score = ((int)(inValues[3]));
            int timeLimit = ((int)(inValues[4]));
            long memoryLimit = ((long)(inValues[5]));
            string std = ((string)(inValues[6]));
            string spj = ((string)(inValues[7]));
            string validator = ((string)(inValues[8]));
            System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage = ((System.Nullable<CenaPlus.Entity.ProgrammingLanguage>)(inValues[9]));
            System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage = ((System.Nullable<CenaPlus.Entity.ProgrammingLanguage>)(inValues[10]));
            System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage = ((System.Nullable<CenaPlus.Entity.ProgrammingLanguage>)(inValues[11]));
            CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages = ((CenaPlus.Entity.ProgrammingLanguage[])(inValues[12]));
            return this.BeginCreateProblem(contestID, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages, callback, asyncState);
        }
        
        private object[] OnEndCreateProblem(System.IAsyncResult result) {
            int retVal = this.EndCreateProblem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateProblemCompleted(object state) {
            if ((this.CreateProblemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateProblemCompleted(this, new CreateProblemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateProblemAsync(int contestID, string title, string content, int score, int timeLimit, long memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages) {
            this.CreateProblemAsync(contestID, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages, null);
        }
        
        public void CreateProblemAsync(int contestID, string title, string content, int score, int timeLimit, long memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages, object userState) {
            if ((this.onBeginCreateProblemDelegate == null)) {
                this.onBeginCreateProblemDelegate = new BeginOperationDelegate(this.OnBeginCreateProblem);
            }
            if ((this.onEndCreateProblemDelegate == null)) {
                this.onEndCreateProblemDelegate = new EndOperationDelegate(this.OnEndCreateProblem);
            }
            if ((this.onCreateProblemCompletedDelegate == null)) {
                this.onCreateProblemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateProblemCompleted);
            }
            base.InvokeAsync(this.onBeginCreateProblemDelegate, new object[] {
                        contestID,
                        title,
                        content,
                        score,
                        timeLimit,
                        memoryLimit,
                        std,
                        spj,
                        validator,
                        stdLanguage,
                        spjLanguage,
                        validatorLanguage,
                        forbiddenLanguages}, this.onEndCreateProblemDelegate, this.onCreateProblemCompletedDelegate, userState);
        }
        
        public void UpdateProblem(int id, string title, string content, System.Nullable<int> score, System.Nullable<int> timeLimit, System.Nullable<long> memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages) {
            base.Channel.UpdateProblem(id, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateProblem(int id, string title, string content, System.Nullable<int> score, System.Nullable<int> timeLimit, System.Nullable<long> memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateProblem(id, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateProblem(System.IAsyncResult result) {
            base.Channel.EndUpdateProblem(result);
        }
        
        private System.IAsyncResult OnBeginUpdateProblem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            string title = ((string)(inValues[1]));
            string content = ((string)(inValues[2]));
            System.Nullable<int> score = ((System.Nullable<int>)(inValues[3]));
            System.Nullable<int> timeLimit = ((System.Nullable<int>)(inValues[4]));
            System.Nullable<long> memoryLimit = ((System.Nullable<long>)(inValues[5]));
            string std = ((string)(inValues[6]));
            string spj = ((string)(inValues[7]));
            string validator = ((string)(inValues[8]));
            System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage = ((System.Nullable<CenaPlus.Entity.ProgrammingLanguage>)(inValues[9]));
            System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage = ((System.Nullable<CenaPlus.Entity.ProgrammingLanguage>)(inValues[10]));
            System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage = ((System.Nullable<CenaPlus.Entity.ProgrammingLanguage>)(inValues[11]));
            CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages = ((CenaPlus.Entity.ProgrammingLanguage[])(inValues[12]));
            return this.BeginUpdateProblem(id, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages, callback, asyncState);
        }
        
        private object[] OnEndUpdateProblem(System.IAsyncResult result) {
            this.EndUpdateProblem(result);
            return null;
        }
        
        private void OnUpdateProblemCompleted(object state) {
            if ((this.UpdateProblemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateProblemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateProblemAsync(int id, string title, string content, System.Nullable<int> score, System.Nullable<int> timeLimit, System.Nullable<long> memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages) {
            this.UpdateProblemAsync(id, title, content, score, timeLimit, memoryLimit, std, spj, validator, stdLanguage, spjLanguage, validatorLanguage, forbiddenLanguages, null);
        }
        
        public void UpdateProblemAsync(int id, string title, string content, System.Nullable<int> score, System.Nullable<int> timeLimit, System.Nullable<long> memoryLimit, string std, string spj, string validator, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> stdLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> spjLanguage, System.Nullable<CenaPlus.Entity.ProgrammingLanguage> validatorLanguage, CenaPlus.Entity.ProgrammingLanguage[] forbiddenLanguages, object userState) {
            if ((this.onBeginUpdateProblemDelegate == null)) {
                this.onBeginUpdateProblemDelegate = new BeginOperationDelegate(this.OnBeginUpdateProblem);
            }
            if ((this.onEndUpdateProblemDelegate == null)) {
                this.onEndUpdateProblemDelegate = new EndOperationDelegate(this.OnEndUpdateProblem);
            }
            if ((this.onUpdateProblemCompletedDelegate == null)) {
                this.onUpdateProblemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateProblemCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateProblemDelegate, new object[] {
                        id,
                        title,
                        content,
                        score,
                        timeLimit,
                        memoryLimit,
                        std,
                        spj,
                        validator,
                        stdLanguage,
                        spjLanguage,
                        validatorLanguage,
                        forbiddenLanguages}, this.onEndUpdateProblemDelegate, this.onUpdateProblemCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.Problem GetProblem(int id) {
            return base.Channel.GetProblem(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProblem(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProblem(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.Problem EndGetProblem(System.IAsyncResult result) {
            return base.Channel.EndGetProblem(result);
        }
        
        private System.IAsyncResult OnBeginGetProblem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetProblem(id, callback, asyncState);
        }
        
        private object[] OnEndGetProblem(System.IAsyncResult result) {
            CenaPlus.Entity.Problem retVal = this.EndGetProblem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProblemCompleted(object state) {
            if ((this.GetProblemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProblemCompleted(this, new GetProblemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProblemAsync(int id) {
            this.GetProblemAsync(id, null);
        }
        
        public void GetProblemAsync(int id, object userState) {
            if ((this.onBeginGetProblemDelegate == null)) {
                this.onBeginGetProblemDelegate = new BeginOperationDelegate(this.OnBeginGetProblem);
            }
            if ((this.onEndGetProblemDelegate == null)) {
                this.onEndGetProblemDelegate = new EndOperationDelegate(this.OnEndGetProblem);
            }
            if ((this.onGetProblemCompletedDelegate == null)) {
                this.onGetProblemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProblemCompleted);
            }
            base.InvokeAsync(this.onBeginGetProblemDelegate, new object[] {
                        id}, this.onEndGetProblemDelegate, this.onGetProblemCompletedDelegate, userState);
        }
        
        public void DeleteProblem(int id) {
            base.Channel.DeleteProblem(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteProblem(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteProblem(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteProblem(System.IAsyncResult result) {
            base.Channel.EndDeleteProblem(result);
        }
        
        private System.IAsyncResult OnBeginDeleteProblem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteProblem(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteProblem(System.IAsyncResult result) {
            this.EndDeleteProblem(result);
            return null;
        }
        
        private void OnDeleteProblemCompleted(object state) {
            if ((this.DeleteProblemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteProblemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteProblemAsync(int id) {
            this.DeleteProblemAsync(id, null);
        }
        
        public void DeleteProblemAsync(int id, object userState) {
            if ((this.onBeginDeleteProblemDelegate == null)) {
                this.onBeginDeleteProblemDelegate = new BeginOperationDelegate(this.OnBeginDeleteProblem);
            }
            if ((this.onEndDeleteProblemDelegate == null)) {
                this.onEndDeleteProblemDelegate = new EndOperationDelegate(this.OnEndDeleteProblem);
            }
            if ((this.onDeleteProblemCompletedDelegate == null)) {
                this.onDeleteProblemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteProblemCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteProblemDelegate, new object[] {
                        id}, this.onEndDeleteProblemDelegate, this.onDeleteProblemCompletedDelegate, userState);
        }
        
        public int Submit(int problemID, string code, CenaPlus.Entity.ProgrammingLanguage language) {
            return base.Channel.Submit(problemID, code, language);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubmit(int problemID, string code, CenaPlus.Entity.ProgrammingLanguage language, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubmit(problemID, code, language, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndSubmit(System.IAsyncResult result) {
            return base.Channel.EndSubmit(result);
        }
        
        private System.IAsyncResult OnBeginSubmit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int problemID = ((int)(inValues[0]));
            string code = ((string)(inValues[1]));
            CenaPlus.Entity.ProgrammingLanguage language = ((CenaPlus.Entity.ProgrammingLanguage)(inValues[2]));
            return this.BeginSubmit(problemID, code, language, callback, asyncState);
        }
        
        private object[] OnEndSubmit(System.IAsyncResult result) {
            int retVal = this.EndSubmit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubmitCompleted(object state) {
            if ((this.SubmitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubmitCompleted(this, new SubmitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubmitAsync(int problemID, string code, CenaPlus.Entity.ProgrammingLanguage language) {
            this.SubmitAsync(problemID, code, language, null);
        }
        
        public void SubmitAsync(int problemID, string code, CenaPlus.Entity.ProgrammingLanguage language, object userState) {
            if ((this.onBeginSubmitDelegate == null)) {
                this.onBeginSubmitDelegate = new BeginOperationDelegate(this.OnBeginSubmit);
            }
            if ((this.onEndSubmitDelegate == null)) {
                this.onEndSubmitDelegate = new EndOperationDelegate(this.OnEndSubmit);
            }
            if ((this.onSubmitCompletedDelegate == null)) {
                this.onSubmitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubmitCompleted);
            }
            base.InvokeAsync(this.onBeginSubmitDelegate, new object[] {
                        problemID,
                        code,
                        language}, this.onEndSubmitDelegate, this.onSubmitCompletedDelegate, userState);
        }
        
        public int[] GetRecordList(int contestID) {
            return base.Channel.GetRecordList(contestID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRecordList(int contestID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecordList(contestID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetRecordList(System.IAsyncResult result) {
            return base.Channel.EndGetRecordList(result);
        }
        
        private System.IAsyncResult OnBeginGetRecordList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int contestID = ((int)(inValues[0]));
            return this.BeginGetRecordList(contestID, callback, asyncState);
        }
        
        private object[] OnEndGetRecordList(System.IAsyncResult result) {
            int[] retVal = this.EndGetRecordList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecordListCompleted(object state) {
            if ((this.GetRecordListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecordListCompleted(this, new GetRecordListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecordListAsync(int contestID) {
            this.GetRecordListAsync(contestID, null);
        }
        
        public void GetRecordListAsync(int contestID, object userState) {
            if ((this.onBeginGetRecordListDelegate == null)) {
                this.onBeginGetRecordListDelegate = new BeginOperationDelegate(this.OnBeginGetRecordList);
            }
            if ((this.onEndGetRecordListDelegate == null)) {
                this.onEndGetRecordListDelegate = new EndOperationDelegate(this.OnEndGetRecordList);
            }
            if ((this.onGetRecordListCompletedDelegate == null)) {
                this.onGetRecordListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecordListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecordListDelegate, new object[] {
                        contestID}, this.onEndGetRecordListDelegate, this.onGetRecordListCompletedDelegate, userState);
        }
        
        public void Rejudge(int recordID) {
            base.Channel.Rejudge(recordID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRejudge(int recordID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRejudge(recordID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRejudge(System.IAsyncResult result) {
            base.Channel.EndRejudge(result);
        }
        
        private System.IAsyncResult OnBeginRejudge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int recordID = ((int)(inValues[0]));
            return this.BeginRejudge(recordID, callback, asyncState);
        }
        
        private object[] OnEndRejudge(System.IAsyncResult result) {
            this.EndRejudge(result);
            return null;
        }
        
        private void OnRejudgeCompleted(object state) {
            if ((this.RejudgeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RejudgeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RejudgeAsync(int recordID) {
            this.RejudgeAsync(recordID, null);
        }
        
        public void RejudgeAsync(int recordID, object userState) {
            if ((this.onBeginRejudgeDelegate == null)) {
                this.onBeginRejudgeDelegate = new BeginOperationDelegate(this.OnBeginRejudge);
            }
            if ((this.onEndRejudgeDelegate == null)) {
                this.onEndRejudgeDelegate = new EndOperationDelegate(this.OnEndRejudge);
            }
            if ((this.onRejudgeCompletedDelegate == null)) {
                this.onRejudgeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRejudgeCompleted);
            }
            base.InvokeAsync(this.onBeginRejudgeDelegate, new object[] {
                        recordID}, this.onEndRejudgeDelegate, this.onRejudgeCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.Record GetRecord(int id) {
            return base.Channel.GetRecord(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRecord(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecord(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.Record EndGetRecord(System.IAsyncResult result) {
            return base.Channel.EndGetRecord(result);
        }
        
        private System.IAsyncResult OnBeginGetRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetRecord(id, callback, asyncState);
        }
        
        private object[] OnEndGetRecord(System.IAsyncResult result) {
            CenaPlus.Entity.Record retVal = this.EndGetRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecordCompleted(object state) {
            if ((this.GetRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecordCompleted(this, new GetRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecordAsync(int id) {
            this.GetRecordAsync(id, null);
        }
        
        public void GetRecordAsync(int id, object userState) {
            if ((this.onBeginGetRecordDelegate == null)) {
                this.onBeginGetRecordDelegate = new BeginOperationDelegate(this.OnBeginGetRecord);
            }
            if ((this.onEndGetRecordDelegate == null)) {
                this.onEndGetRecordDelegate = new EndOperationDelegate(this.OnEndGetRecord);
            }
            if ((this.onGetRecordCompletedDelegate == null)) {
                this.onGetRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecordCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecordDelegate, new object[] {
                        id}, this.onEndGetRecordDelegate, this.onGetRecordCompletedDelegate, userState);
        }
        
        public int[] GetQuestionList(int contestID) {
            return base.Channel.GetQuestionList(contestID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetQuestionList(int contestID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuestionList(contestID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetQuestionList(System.IAsyncResult result) {
            return base.Channel.EndGetQuestionList(result);
        }
        
        private System.IAsyncResult OnBeginGetQuestionList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int contestID = ((int)(inValues[0]));
            return this.BeginGetQuestionList(contestID, callback, asyncState);
        }
        
        private object[] OnEndGetQuestionList(System.IAsyncResult result) {
            int[] retVal = this.EndGetQuestionList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQuestionListCompleted(object state) {
            if ((this.GetQuestionListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQuestionListCompleted(this, new GetQuestionListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQuestionListAsync(int contestID) {
            this.GetQuestionListAsync(contestID, null);
        }
        
        public void GetQuestionListAsync(int contestID, object userState) {
            if ((this.onBeginGetQuestionListDelegate == null)) {
                this.onBeginGetQuestionListDelegate = new BeginOperationDelegate(this.OnBeginGetQuestionList);
            }
            if ((this.onEndGetQuestionListDelegate == null)) {
                this.onEndGetQuestionListDelegate = new EndOperationDelegate(this.OnEndGetQuestionList);
            }
            if ((this.onGetQuestionListCompletedDelegate == null)) {
                this.onGetQuestionListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQuestionListCompleted);
            }
            base.InvokeAsync(this.onBeginGetQuestionListDelegate, new object[] {
                        contestID}, this.onEndGetQuestionListDelegate, this.onGetQuestionListCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.Question GetQuestion(int id) {
            return base.Channel.GetQuestion(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetQuestion(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuestion(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.Question EndGetQuestion(System.IAsyncResult result) {
            return base.Channel.EndGetQuestion(result);
        }
        
        private System.IAsyncResult OnBeginGetQuestion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetQuestion(id, callback, asyncState);
        }
        
        private object[] OnEndGetQuestion(System.IAsyncResult result) {
            CenaPlus.Entity.Question retVal = this.EndGetQuestion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQuestionCompleted(object state) {
            if ((this.GetQuestionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQuestionCompleted(this, new GetQuestionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQuestionAsync(int id) {
            this.GetQuestionAsync(id, null);
        }
        
        public void GetQuestionAsync(int id, object userState) {
            if ((this.onBeginGetQuestionDelegate == null)) {
                this.onBeginGetQuestionDelegate = new BeginOperationDelegate(this.OnBeginGetQuestion);
            }
            if ((this.onEndGetQuestionDelegate == null)) {
                this.onEndGetQuestionDelegate = new EndOperationDelegate(this.OnEndGetQuestion);
            }
            if ((this.onGetQuestionCompletedDelegate == null)) {
                this.onGetQuestionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQuestionCompleted);
            }
            base.InvokeAsync(this.onBeginGetQuestionDelegate, new object[] {
                        id}, this.onEndGetQuestionDelegate, this.onGetQuestionCompletedDelegate, userState);
        }
        
        public int AskQuestion(int contestID, string description) {
            return base.Channel.AskQuestion(contestID, description);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAskQuestion(int contestID, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAskQuestion(contestID, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAskQuestion(System.IAsyncResult result) {
            return base.Channel.EndAskQuestion(result);
        }
        
        private System.IAsyncResult OnBeginAskQuestion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int contestID = ((int)(inValues[0]));
            string description = ((string)(inValues[1]));
            return this.BeginAskQuestion(contestID, description, callback, asyncState);
        }
        
        private object[] OnEndAskQuestion(System.IAsyncResult result) {
            int retVal = this.EndAskQuestion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAskQuestionCompleted(object state) {
            if ((this.AskQuestionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AskQuestionCompleted(this, new AskQuestionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AskQuestionAsync(int contestID, string description) {
            this.AskQuestionAsync(contestID, description, null);
        }
        
        public void AskQuestionAsync(int contestID, string description, object userState) {
            if ((this.onBeginAskQuestionDelegate == null)) {
                this.onBeginAskQuestionDelegate = new BeginOperationDelegate(this.OnBeginAskQuestion);
            }
            if ((this.onEndAskQuestionDelegate == null)) {
                this.onEndAskQuestionDelegate = new EndOperationDelegate(this.OnEndAskQuestion);
            }
            if ((this.onAskQuestionCompletedDelegate == null)) {
                this.onAskQuestionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAskQuestionCompleted);
            }
            base.InvokeAsync(this.onBeginAskQuestionDelegate, new object[] {
                        contestID,
                        description}, this.onEndAskQuestionDelegate, this.onAskQuestionCompletedDelegate, userState);
        }
        
        public int[] GetUserList() {
            return base.Channel.GetUserList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetUserList(System.IAsyncResult result) {
            return base.Channel.EndGetUserList(result);
        }
        
        private System.IAsyncResult OnBeginGetUserList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetUserList(callback, asyncState);
        }
        
        private object[] OnEndGetUserList(System.IAsyncResult result) {
            int[] retVal = this.EndGetUserList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserListCompleted(object state) {
            if ((this.GetUserListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserListCompleted(this, new GetUserListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserListAsync() {
            this.GetUserListAsync(null);
        }
        
        public void GetUserListAsync(object userState) {
            if ((this.onBeginGetUserListDelegate == null)) {
                this.onBeginGetUserListDelegate = new BeginOperationDelegate(this.OnBeginGetUserList);
            }
            if ((this.onEndGetUserListDelegate == null)) {
                this.onEndGetUserListDelegate = new EndOperationDelegate(this.OnEndGetUserList);
            }
            if ((this.onGetUserListCompletedDelegate == null)) {
                this.onGetUserListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserListDelegate, null, this.onEndGetUserListDelegate, this.onGetUserListCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.User GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUser(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.User EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetUser(id, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            CenaPlus.Entity.User retVal = this.EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(int id) {
            this.GetUserAsync(id, null);
        }
        
        public void GetUserAsync(int id, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        id}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        public void CreateUser(string name, string nickname, string password, CenaPlus.Entity.UserRole role) {
            base.Channel.CreateUser(name, nickname, password, role);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateUser(string name, string nickname, string password, CenaPlus.Entity.UserRole role, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(name, nickname, password, role, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCreateUser(System.IAsyncResult result) {
            base.Channel.EndCreateUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string nickname = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            CenaPlus.Entity.UserRole role = ((CenaPlus.Entity.UserRole)(inValues[3]));
            return this.BeginCreateUser(name, nickname, password, role, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            this.EndCreateUser(result);
            return null;
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(string name, string nickname, string password, CenaPlus.Entity.UserRole role) {
            this.CreateUserAsync(name, nickname, password, role, null);
        }
        
        public void CreateUserAsync(string name, string nickname, string password, CenaPlus.Entity.UserRole role, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        name,
                        nickname,
                        password,
                        role}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        public void UpdateUser(int id, string name, string nickname, string password, System.Nullable<CenaPlus.Entity.UserRole> role) {
            base.Channel.UpdateUser(id, name, nickname, password, role);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUser(int id, string name, string nickname, string password, System.Nullable<CenaPlus.Entity.UserRole> role, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(id, name, nickname, password, role, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUser(System.IAsyncResult result) {
            base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            string name = ((string)(inValues[1]));
            string nickname = ((string)(inValues[2]));
            string password = ((string)(inValues[3]));
            System.Nullable<CenaPlus.Entity.UserRole> role = ((System.Nullable<CenaPlus.Entity.UserRole>)(inValues[4]));
            return this.BeginUpdateUser(id, name, nickname, password, role, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            this.EndUpdateUser(result);
            return null;
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(int id, string name, string nickname, string password, System.Nullable<CenaPlus.Entity.UserRole> role) {
            this.UpdateUserAsync(id, name, nickname, password, role, null);
        }
        
        public void UpdateUserAsync(int id, string name, string nickname, string password, System.Nullable<CenaPlus.Entity.UserRole> role, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        id,
                        name,
                        nickname,
                        password,
                        role}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        public void DeleteUser(int id) {
            base.Channel.DeleteUser(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteUser(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteUser(System.IAsyncResult result) {
            base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteUser(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            this.EndDeleteUser(result);
            return null;
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(int id) {
            this.DeleteUserAsync(id, null);
        }
        
        public void DeleteUserAsync(int id, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        id}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        public int[] GetOnlineList() {
            return base.Channel.GetOnlineList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOnlineList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOnlineList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetOnlineList(System.IAsyncResult result) {
            return base.Channel.EndGetOnlineList(result);
        }
        
        private System.IAsyncResult OnBeginGetOnlineList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetOnlineList(callback, asyncState);
        }
        
        private object[] OnEndGetOnlineList(System.IAsyncResult result) {
            int[] retVal = this.EndGetOnlineList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOnlineListCompleted(object state) {
            if ((this.GetOnlineListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOnlineListCompleted(this, new GetOnlineListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOnlineListAsync() {
            this.GetOnlineListAsync(null);
        }
        
        public void GetOnlineListAsync(object userState) {
            if ((this.onBeginGetOnlineListDelegate == null)) {
                this.onBeginGetOnlineListDelegate = new BeginOperationDelegate(this.OnBeginGetOnlineList);
            }
            if ((this.onEndGetOnlineListDelegate == null)) {
                this.onEndGetOnlineListDelegate = new EndOperationDelegate(this.OnEndGetOnlineList);
            }
            if ((this.onGetOnlineListCompletedDelegate == null)) {
                this.onGetOnlineListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOnlineListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOnlineListDelegate, null, this.onEndGetOnlineListDelegate, this.onGetOnlineListCompletedDelegate, userState);
        }
        
        public void Kick(int userID) {
            base.Channel.Kick(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginKick(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKick(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndKick(System.IAsyncResult result) {
            base.Channel.EndKick(result);
        }
        
        private System.IAsyncResult OnBeginKick(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginKick(userID, callback, asyncState);
        }
        
        private object[] OnEndKick(System.IAsyncResult result) {
            this.EndKick(result);
            return null;
        }
        
        private void OnKickCompleted(object state) {
            if ((this.KickCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KickCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KickAsync(int userID) {
            this.KickAsync(userID, null);
        }
        
        public void KickAsync(int userID, object userState) {
            if ((this.onBeginKickDelegate == null)) {
                this.onBeginKickDelegate = new BeginOperationDelegate(this.OnBeginKick);
            }
            if ((this.onEndKickDelegate == null)) {
                this.onEndKickDelegate = new EndOperationDelegate(this.OnEndKick);
            }
            if ((this.onKickCompletedDelegate == null)) {
                this.onKickCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKickCompleted);
            }
            base.InvokeAsync(this.onBeginKickDelegate, new object[] {
                        userID}, this.onEndKickDelegate, this.onKickCompletedDelegate, userState);
        }
        
        public int[] GetTestCaseList(int problemID) {
            return base.Channel.GetTestCaseList(problemID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTestCaseList(int problemID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestCaseList(problemID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetTestCaseList(System.IAsyncResult result) {
            return base.Channel.EndGetTestCaseList(result);
        }
        
        private System.IAsyncResult OnBeginGetTestCaseList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int problemID = ((int)(inValues[0]));
            return this.BeginGetTestCaseList(problemID, callback, asyncState);
        }
        
        private object[] OnEndGetTestCaseList(System.IAsyncResult result) {
            int[] retVal = this.EndGetTestCaseList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestCaseListCompleted(object state) {
            if ((this.GetTestCaseListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestCaseListCompleted(this, new GetTestCaseListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestCaseListAsync(int problemID) {
            this.GetTestCaseListAsync(problemID, null);
        }
        
        public void GetTestCaseListAsync(int problemID, object userState) {
            if ((this.onBeginGetTestCaseListDelegate == null)) {
                this.onBeginGetTestCaseListDelegate = new BeginOperationDelegate(this.OnBeginGetTestCaseList);
            }
            if ((this.onEndGetTestCaseListDelegate == null)) {
                this.onEndGetTestCaseListDelegate = new EndOperationDelegate(this.OnEndGetTestCaseList);
            }
            if ((this.onGetTestCaseListCompletedDelegate == null)) {
                this.onGetTestCaseListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestCaseListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestCaseListDelegate, new object[] {
                        problemID}, this.onEndGetTestCaseListDelegate, this.onGetTestCaseListCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.TestCase GetTestCase(int id) {
            return base.Channel.GetTestCase(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTestCase(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestCase(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.TestCase EndGetTestCase(System.IAsyncResult result) {
            return base.Channel.EndGetTestCase(result);
        }
        
        private System.IAsyncResult OnBeginGetTestCase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetTestCase(id, callback, asyncState);
        }
        
        private object[] OnEndGetTestCase(System.IAsyncResult result) {
            CenaPlus.Entity.TestCase retVal = this.EndGetTestCase(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestCaseCompleted(object state) {
            if ((this.GetTestCaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestCaseCompleted(this, new GetTestCaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestCaseAsync(int id) {
            this.GetTestCaseAsync(id, null);
        }
        
        public void GetTestCaseAsync(int id, object userState) {
            if ((this.onBeginGetTestCaseDelegate == null)) {
                this.onBeginGetTestCaseDelegate = new BeginOperationDelegate(this.OnBeginGetTestCase);
            }
            if ((this.onEndGetTestCaseDelegate == null)) {
                this.onEndGetTestCaseDelegate = new EndOperationDelegate(this.OnEndGetTestCase);
            }
            if ((this.onGetTestCaseCompletedDelegate == null)) {
                this.onGetTestCaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestCaseCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestCaseDelegate, new object[] {
                        id}, this.onEndGetTestCaseDelegate, this.onGetTestCaseCompletedDelegate, userState);
        }
        
        public void DeleteTestCase(int id) {
            base.Channel.DeleteTestCase(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteTestCase(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTestCase(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteTestCase(System.IAsyncResult result) {
            base.Channel.EndDeleteTestCase(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTestCase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteTestCase(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteTestCase(System.IAsyncResult result) {
            this.EndDeleteTestCase(result);
            return null;
        }
        
        private void OnDeleteTestCaseCompleted(object state) {
            if ((this.DeleteTestCaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTestCaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTestCaseAsync(int id) {
            this.DeleteTestCaseAsync(id, null);
        }
        
        public void DeleteTestCaseAsync(int id, object userState) {
            if ((this.onBeginDeleteTestCaseDelegate == null)) {
                this.onBeginDeleteTestCaseDelegate = new BeginOperationDelegate(this.OnBeginDeleteTestCase);
            }
            if ((this.onEndDeleteTestCaseDelegate == null)) {
                this.onEndDeleteTestCaseDelegate = new EndOperationDelegate(this.OnEndDeleteTestCase);
            }
            if ((this.onDeleteTestCaseCompletedDelegate == null)) {
                this.onDeleteTestCaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTestCaseCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTestCaseDelegate, new object[] {
                        id}, this.onEndDeleteTestCaseDelegate, this.onDeleteTestCaseCompletedDelegate, userState);
        }
        
        public void UpdateTestCase(int id, byte[] input, byte[] output, System.Nullable<CenaPlus.Entity.TestCaseType> type) {
            base.Channel.UpdateTestCase(id, input, output, type);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTestCase(int id, byte[] input, byte[] output, System.Nullable<CenaPlus.Entity.TestCaseType> type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTestCase(id, input, output, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTestCase(System.IAsyncResult result) {
            base.Channel.EndUpdateTestCase(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTestCase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            byte[] input = ((byte[])(inValues[1]));
            byte[] output = ((byte[])(inValues[2]));
            System.Nullable<CenaPlus.Entity.TestCaseType> type = ((System.Nullable<CenaPlus.Entity.TestCaseType>)(inValues[3]));
            return this.BeginUpdateTestCase(id, input, output, type, callback, asyncState);
        }
        
        private object[] OnEndUpdateTestCase(System.IAsyncResult result) {
            this.EndUpdateTestCase(result);
            return null;
        }
        
        private void OnUpdateTestCaseCompleted(object state) {
            if ((this.UpdateTestCaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTestCaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTestCaseAsync(int id, byte[] input, byte[] output, System.Nullable<CenaPlus.Entity.TestCaseType> type) {
            this.UpdateTestCaseAsync(id, input, output, type, null);
        }
        
        public void UpdateTestCaseAsync(int id, byte[] input, byte[] output, System.Nullable<CenaPlus.Entity.TestCaseType> type, object userState) {
            if ((this.onBeginUpdateTestCaseDelegate == null)) {
                this.onBeginUpdateTestCaseDelegate = new BeginOperationDelegate(this.OnBeginUpdateTestCase);
            }
            if ((this.onEndUpdateTestCaseDelegate == null)) {
                this.onEndUpdateTestCaseDelegate = new EndOperationDelegate(this.OnEndUpdateTestCase);
            }
            if ((this.onUpdateTestCaseCompletedDelegate == null)) {
                this.onUpdateTestCaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTestCaseCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTestCaseDelegate, new object[] {
                        id,
                        input,
                        output,
                        type}, this.onEndUpdateTestCaseDelegate, this.onUpdateTestCaseCompletedDelegate, userState);
        }
        
        public int CreateTestCase(int problemID, byte[] input, byte[] output, CenaPlus.Entity.TestCaseType type) {
            return base.Channel.CreateTestCase(problemID, input, output, type);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateTestCase(int problemID, byte[] input, byte[] output, CenaPlus.Entity.TestCaseType type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateTestCase(problemID, input, output, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndCreateTestCase(System.IAsyncResult result) {
            return base.Channel.EndCreateTestCase(result);
        }
        
        private System.IAsyncResult OnBeginCreateTestCase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int problemID = ((int)(inValues[0]));
            byte[] input = ((byte[])(inValues[1]));
            byte[] output = ((byte[])(inValues[2]));
            CenaPlus.Entity.TestCaseType type = ((CenaPlus.Entity.TestCaseType)(inValues[3]));
            return this.BeginCreateTestCase(problemID, input, output, type, callback, asyncState);
        }
        
        private object[] OnEndCreateTestCase(System.IAsyncResult result) {
            int retVal = this.EndCreateTestCase(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateTestCaseCompleted(object state) {
            if ((this.CreateTestCaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateTestCaseCompleted(this, new CreateTestCaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateTestCaseAsync(int problemID, byte[] input, byte[] output, CenaPlus.Entity.TestCaseType type) {
            this.CreateTestCaseAsync(problemID, input, output, type, null);
        }
        
        public void CreateTestCaseAsync(int problemID, byte[] input, byte[] output, CenaPlus.Entity.TestCaseType type, object userState) {
            if ((this.onBeginCreateTestCaseDelegate == null)) {
                this.onBeginCreateTestCaseDelegate = new BeginOperationDelegate(this.OnBeginCreateTestCase);
            }
            if ((this.onEndCreateTestCaseDelegate == null)) {
                this.onEndCreateTestCaseDelegate = new EndOperationDelegate(this.OnEndCreateTestCase);
            }
            if ((this.onCreateTestCaseCompletedDelegate == null)) {
                this.onCreateTestCaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateTestCaseCompleted);
            }
            base.InvokeAsync(this.onBeginCreateTestCaseDelegate, new object[] {
                        problemID,
                        input,
                        output,
                        type}, this.onEndCreateTestCaseDelegate, this.onCreateTestCaseCompletedDelegate, userState);
        }
        
        public int RequestPrinting(int contestID, string content, int copies) {
            return base.Channel.RequestPrinting(contestID, content, copies);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestPrinting(int contestID, string content, int copies, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestPrinting(contestID, content, copies, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRequestPrinting(System.IAsyncResult result) {
            return base.Channel.EndRequestPrinting(result);
        }
        
        private System.IAsyncResult OnBeginRequestPrinting(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int contestID = ((int)(inValues[0]));
            string content = ((string)(inValues[1]));
            int copies = ((int)(inValues[2]));
            return this.BeginRequestPrinting(contestID, content, copies, callback, asyncState);
        }
        
        private object[] OnEndRequestPrinting(System.IAsyncResult result) {
            int retVal = this.EndRequestPrinting(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestPrintingCompleted(object state) {
            if ((this.RequestPrintingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestPrintingCompleted(this, new RequestPrintingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestPrintingAsync(int contestID, string content, int copies) {
            this.RequestPrintingAsync(contestID, content, copies, null);
        }
        
        public void RequestPrintingAsync(int contestID, string content, int copies, object userState) {
            if ((this.onBeginRequestPrintingDelegate == null)) {
                this.onBeginRequestPrintingDelegate = new BeginOperationDelegate(this.OnBeginRequestPrinting);
            }
            if ((this.onEndRequestPrintingDelegate == null)) {
                this.onEndRequestPrintingDelegate = new EndOperationDelegate(this.OnEndRequestPrinting);
            }
            if ((this.onRequestPrintingCompletedDelegate == null)) {
                this.onRequestPrintingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestPrintingCompleted);
            }
            base.InvokeAsync(this.onBeginRequestPrintingDelegate, new object[] {
                        contestID,
                        content,
                        copies}, this.onEndRequestPrintingDelegate, this.onRequestPrintingCompletedDelegate, userState);
        }
        
        public CenaPlus.Entity.PrintRequest GetPrintRequest(int id) {
            return base.Channel.GetPrintRequest(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPrintRequest(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPrintRequest(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CenaPlus.Entity.PrintRequest EndGetPrintRequest(System.IAsyncResult result) {
            return base.Channel.EndGetPrintRequest(result);
        }
        
        private System.IAsyncResult OnBeginGetPrintRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetPrintRequest(id, callback, asyncState);
        }
        
        private object[] OnEndGetPrintRequest(System.IAsyncResult result) {
            CenaPlus.Entity.PrintRequest retVal = this.EndGetPrintRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPrintRequestCompleted(object state) {
            if ((this.GetPrintRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPrintRequestCompleted(this, new GetPrintRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPrintRequestAsync(int id) {
            this.GetPrintRequestAsync(id, null);
        }
        
        public void GetPrintRequestAsync(int id, object userState) {
            if ((this.onBeginGetPrintRequestDelegate == null)) {
                this.onBeginGetPrintRequestDelegate = new BeginOperationDelegate(this.OnBeginGetPrintRequest);
            }
            if ((this.onEndGetPrintRequestDelegate == null)) {
                this.onEndGetPrintRequestDelegate = new EndOperationDelegate(this.OnEndGetPrintRequest);
            }
            if ((this.onGetPrintRequestCompletedDelegate == null)) {
                this.onGetPrintRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPrintRequestCompleted);
            }
            base.InvokeAsync(this.onBeginGetPrintRequestDelegate, new object[] {
                        id}, this.onEndGetPrintRequestDelegate, this.onGetPrintRequestCompletedDelegate, userState);
        }
        
        public int[] GetPrintRequestList(int contestID) {
            return base.Channel.GetPrintRequestList(contestID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPrintRequestList(int contestID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPrintRequestList(contestID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetPrintRequestList(System.IAsyncResult result) {
            return base.Channel.EndGetPrintRequestList(result);
        }
        
        private System.IAsyncResult OnBeginGetPrintRequestList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int contestID = ((int)(inValues[0]));
            return this.BeginGetPrintRequestList(contestID, callback, asyncState);
        }
        
        private object[] OnEndGetPrintRequestList(System.IAsyncResult result) {
            int[] retVal = this.EndGetPrintRequestList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPrintRequestListCompleted(object state) {
            if ((this.GetPrintRequestListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPrintRequestListCompleted(this, new GetPrintRequestListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPrintRequestListAsync(int contestID) {
            this.GetPrintRequestListAsync(contestID, null);
        }
        
        public void GetPrintRequestListAsync(int contestID, object userState) {
            if ((this.onBeginGetPrintRequestListDelegate == null)) {
                this.onBeginGetPrintRequestListDelegate = new BeginOperationDelegate(this.OnBeginGetPrintRequestList);
            }
            if ((this.onEndGetPrintRequestListDelegate == null)) {
                this.onEndGetPrintRequestListDelegate = new EndOperationDelegate(this.OnEndGetPrintRequestList);
            }
            if ((this.onGetPrintRequestListCompletedDelegate == null)) {
                this.onGetPrintRequestListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPrintRequestListCompleted);
            }
            base.InvokeAsync(this.onBeginGetPrintRequestListDelegate, new object[] {
                        contestID}, this.onEndGetPrintRequestListDelegate, this.onGetPrintRequestListCompletedDelegate, userState);
        }
        
        public void UpdatePrintRequest(int id, string content, System.Nullable<int> copies, System.Nullable<CenaPlus.Entity.PrintRequestStatus> status) {
            base.Channel.UpdatePrintRequest(id, content, copies, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdatePrintRequest(int id, string content, System.Nullable<int> copies, System.Nullable<CenaPlus.Entity.PrintRequestStatus> status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePrintRequest(id, content, copies, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdatePrintRequest(System.IAsyncResult result) {
            base.Channel.EndUpdatePrintRequest(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePrintRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            string content = ((string)(inValues[1]));
            System.Nullable<int> copies = ((System.Nullable<int>)(inValues[2]));
            System.Nullable<CenaPlus.Entity.PrintRequestStatus> status = ((System.Nullable<CenaPlus.Entity.PrintRequestStatus>)(inValues[3]));
            return this.BeginUpdatePrintRequest(id, content, copies, status, callback, asyncState);
        }
        
        private object[] OnEndUpdatePrintRequest(System.IAsyncResult result) {
            this.EndUpdatePrintRequest(result);
            return null;
        }
        
        private void OnUpdatePrintRequestCompleted(object state) {
            if ((this.UpdatePrintRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePrintRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePrintRequestAsync(int id, string content, System.Nullable<int> copies, System.Nullable<CenaPlus.Entity.PrintRequestStatus> status) {
            this.UpdatePrintRequestAsync(id, content, copies, status, null);
        }
        
        public void UpdatePrintRequestAsync(int id, string content, System.Nullable<int> copies, System.Nullable<CenaPlus.Entity.PrintRequestStatus> status, object userState) {
            if ((this.onBeginUpdatePrintRequestDelegate == null)) {
                this.onBeginUpdatePrintRequestDelegate = new BeginOperationDelegate(this.OnBeginUpdatePrintRequest);
            }
            if ((this.onEndUpdatePrintRequestDelegate == null)) {
                this.onEndUpdatePrintRequestDelegate = new EndOperationDelegate(this.OnEndUpdatePrintRequest);
            }
            if ((this.onUpdatePrintRequestCompletedDelegate == null)) {
                this.onUpdatePrintRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePrintRequestCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePrintRequestDelegate, new object[] {
                        id,
                        content,
                        copies,
                        status}, this.onEndUpdatePrintRequestDelegate, this.onUpdatePrintRequestCompletedDelegate, userState);
        }
        
        public void DeletePrintRequest(int id) {
            base.Channel.DeletePrintRequest(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeletePrintRequest(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeletePrintRequest(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeletePrintRequest(System.IAsyncResult result) {
            base.Channel.EndDeletePrintRequest(result);
        }
        
        private System.IAsyncResult OnBeginDeletePrintRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeletePrintRequest(id, callback, asyncState);
        }
        
        private object[] OnEndDeletePrintRequest(System.IAsyncResult result) {
            this.EndDeletePrintRequest(result);
            return null;
        }
        
        private void OnDeletePrintRequestCompleted(object state) {
            if ((this.DeletePrintRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeletePrintRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeletePrintRequestAsync(int id) {
            this.DeletePrintRequestAsync(id, null);
        }
        
        public void DeletePrintRequestAsync(int id, object userState) {
            if ((this.onBeginDeletePrintRequestDelegate == null)) {
                this.onBeginDeletePrintRequestDelegate = new BeginOperationDelegate(this.OnBeginDeletePrintRequest);
            }
            if ((this.onEndDeletePrintRequestDelegate == null)) {
                this.onEndDeletePrintRequestDelegate = new EndOperationDelegate(this.OnEndDeletePrintRequest);
            }
            if ((this.onDeletePrintRequestCompletedDelegate == null)) {
                this.onDeletePrintRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletePrintRequestCompleted);
            }
            base.InvokeAsync(this.onBeginDeletePrintRequestDelegate, new object[] {
                        id}, this.onEndDeletePrintRequestDelegate, this.onDeletePrintRequestCompletedDelegate, userState);
        }
    }
}
